package com.lucasmoraist.templa.infra.mapper;

import com.lucasmoraist.templa.domain.enums.Roles;
import com.lucasmoraist.templa.domain.model.Course;
import com.lucasmoraist.templa.domain.model.Enrollment;
import com.lucasmoraist.templa.domain.model.Group;
import com.lucasmoraist.templa.domain.utils.FormatDuration;
import com.lucasmoraist.templa.infra.db.entity.GroupEntity;
import com.lucasmoraist.templa.infra.web.request.group.GroupRequest;

import java.time.Duration;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public final class GroupMapper {

    public static Group toDomain(GroupRequest request) {
        return new Group(
                null, // ID will be generated by the database
                request.dayOfWeek(),
                request.startTime(),
                request.endTime(),
                request.maxStudents(),
                null, // Course will be set later when mapping to entity,
                List.of()
        );
    }

    public static List<Group> toDomainList(List<GroupEntity> groups) {
        return groups.stream()
                .map(GroupMapper::toDomain)
                .toList();
    }

    public static GroupEntity toEntity(Group group, Course course) {
        return new GroupEntity(
                group.id(),
                group.dayOfWeek(),
                group.startTime(),
                group.endTime(),
                group.maxStudents(),
                CourseMapper.toEntity(course),
                List.of()
        );
    }

    public static List<GroupEntity> toEntityList(List<Group> groups) {
        return groups.stream()
                .map(GroupMapper::toEntity)
                .toList();
    }

    public static Group toDomain(GroupEntity groupEntity) {
        return new Group(
                groupEntity.getId(),
                groupEntity.getDayOfWeek(),
                groupEntity.getStartTime(),
                groupEntity.getEndTime(),
                groupEntity.getMaxStudents(),
                null,
                groupEntity.getStudentsEnrolled()
                        .stream()
                        .map(it -> new Enrollment(
                                it.getId(),
                                StudentMapper.toDomain(it.getStudent()),
                                null,
                                it.getEnrollmentDate()
                        ))
                        .toList()
        );
    }

    public static Map<String, Object> toResponse(Group group, Roles role) {
        Map<String, Object> response = new LinkedHashMap<>();

        response.put("id", group.id());
        response.put("dayOfWeek", group.dayOfWeek());
        response.put("startTime", group.startTime());
        response.put("endTime", group.endTime());
        response.put("duration", FormatDuration.format(Duration.between(group.startTime(), group.endTime())));

        if (Roles.TEACHER.equals(role)) {
            response.put("maxStudents", group.maxStudents());
        }

        List<Map<String, Object>> students = group.studentsEnrolled().stream()
                .map(it -> {
                    Map<String, Object> student = new LinkedHashMap<>();
                    student.put("student_id", it.student().id());
                    student.put("student_name", it.student().name());

                    Map<String, Object> contact = new LinkedHashMap<>();
                    contact.put("email", it.student().user().email());
                    student.put("contact", contact);

                    student.put("role", it.student().user().role().name());

                    return student;
                })
                .toList();

        response.put("studentsEnrolled", students);

        return response;
    }

    public static GroupEntity toEntity(Group group) {
        return new GroupEntity(
                group.id(),
                group.dayOfWeek(),
                group.startTime(),
                group.endTime(),
                group.maxStudents(),
                null,
                List.of()
        );
    }

}
